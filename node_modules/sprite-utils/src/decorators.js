export function attr(target, prop, descriptor) {
  target.__attributeNames = target.__attributeNames || []
  target.__attributeNames.push(prop)
  if(!descriptor.get) {
    descriptor.get = function () {
      return this.get(prop)
    }
  } else {
    // enable set default to user defined getter
    const _getter = descriptor.get
    descriptor.get = function () {
      let ret = _getter.call(this)
      if(ret == null) {
        ret = this.get(prop)
      }
      return ret
    }
  }
  const _setter = descriptor.set
  descriptor.set = function (val) {
    this.__clearCacheTag = false
    this.__updateTag = false
    _setter.call(this, val)
    if(this.subject && this.subject.hasLayout) {
      const offsetSize = this.subject.offsetSize,
        layoutSize = this.subject.__layoutSize

      if(!layoutSize || offsetSize[0] !== layoutSize[0] || offsetSize[1] !== layoutSize[1]) {
        this.subject.parent.clearLayout()
      }
      this.subject.__lastLayout = offsetSize
    }
    if(this.subject && this.__updateTag) {
      this.subject.forceUpdate(this.__clearCacheTag)
    }
    delete this.__updateTag
    delete this.__clearCacheTag
  }
  return descriptor
}

import {notice} from './utils'

export function setDeprecation(apiName, msg = '') {
  msg = `[Deprecation] ${apiName} has been deprecated.${msg}`
  notice(msg)
}

export function deprecate(...args) {
  let msg = '',
    apiName = ''
  function decorator(target, prop, descriptor) {
    apiName = apiName || `${target.constructor.name}#${prop}`
    if(typeof descriptor.value === 'function') {
      const func = descriptor.value
      descriptor.value = function (...args) {
        setDeprecation(apiName, msg)
        return func.apply(this, args)
      }
    }
    if(descriptor.set) {
      const setter = descriptor.set
      descriptor.set = function (val) {
        setDeprecation(apiName, msg)
        return setter.call(this, val)
      }
    }
    if(descriptor.get) {
      const getter = descriptor.get
      descriptor.get = function () {
        setDeprecation(apiName, msg)
        return getter.call(this)
      }
    }
  }
  if(args.length === 1) {
    msg = args[0]
    return decorator
  }
  if(args.length === 2) {
    apiName = args[0]
    msg = args[1]
    return decorator
  }
  return decorator(...args)
}

export function parseValue(...parsers) {
  return function (target, prop, descriptor) {
    const setter = descriptor.set

    descriptor.set = function (val) {
      val = parsers.reduce((v, parser) => parser(v), val)

      setter.call(this, val)
    }

    return descriptor
  }
}

export function resolveValue(...resolvers) {
  return function (target, prop, descriptor) {
    const getter = descriptor.get

    descriptor.get = function (val) {
      val = getter.call(this)
      val = resolvers.reduce((v, resolver) => resolver(v), val)
      return val
    }
  }
}
